<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on uranari</title>
    <link>https://uranari.com/categories/security/</link>
    <description>Recent content in security on uranari</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 26 Oct 2019 11:20:49 +0900</lastBuildDate>
    
	<atom:link href="https://uranari.com/categories/security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CloudTrail Monitoring -IAM-</title>
      <link>https://uranari.com/tech/aws/cloudtrail-monitoring-iam/</link>
      <pubDate>Sat, 26 Oct 2019 11:20:49 +0900</pubDate>
      
      <guid>https://uranari.com/tech/aws/cloudtrail-monitoring-iam/</guid>
      <description>CloudTrail 見てますか？ AWS を利用するうえでのセキュリティ対策として CloudTrail を有効にすることが色んな記事で紹介されていますが、皆さんちゃんと見ていますか？
ふだん自分がセキュリティ対策として CloudTrail のログでどういったリアルタイム監視をしているかをリソース別に紹介したいと思います。 すべてのリソースのログを一つの記事で紹介すると量が多くなってしまうため、今回はログインと IAM、AssumeRole 周りのログの監視について紹介したいと思います。
紹介するイベントについてとCloudTrailのログについて 本記事と今後も CloudTrail のログ監視について紹介する記事を書くことがあった場合、基本的に Event name の値別で紹介していきます。 また、CloudTrail のログでは、そのイベントが失敗したか成功したかについてはログに errorcode や errormessage のフィールドに値が入っているかどうかで判断できます。
これらのフィールドに値が入っている場合はそのイベントは失敗しており、その理由がそれらのフィールドに記録されます。
 cloudtrailの画面 View event を開くと生ログが見れる
  ConsoleLogin 名前の通り、AWS の Web コンソール にログインを試みた際に記録されるイベント。
あくまで Webコンソール にログインを試みたイベントなので、AWS CLI などを利用した場合はこのイベントは記録されません。
もし急に海外からのログインとかがあったり、本人が身に覚えのない場合は認証情報が漏洩している可能性があるかもしれません。
CreateUser 新しい IAM User が作成された際に記録されるイベント。
勝手に変なユーザーが作成されてないか確認することができます。
CreatePolicy IAM で新しい Policy を作成した際に記録されるイベント。
付与される権限も CloudTrail のログに記録されているので、余計な権限が付与されてないか確認することができます。
CreatePolicyVersion 既存の Policy を編集する際に記録されるイベントです。
こちらもログにインラインポリシーが記録されているので余計な権限が付与されてないか確認することができます。
CreateRole 新しい Role が作成されたときに記録されるイベント。
AWS のサービスの中にはサービスに伴って自動的に Role が作成されるものもある(WAF のログを Kinesis に流すときとか)ので色々とややこしかったりするんですが、こちらも同様に変な Role が作成されてないか監視できます。</description>
    </item>
    
    <item>
      <title>AWS Security Monitoring -IAM-</title>
      <link>https://uranari.com/tech/aws/aws-security-monitoring-iam/</link>
      <pubDate>Wed, 01 May 2019 11:20:49 +0900</pubDate>
      
      <guid>https://uranari.com/tech/aws/aws-security-monitoring-iam/</guid>
      <description>AWS Security Monitoring, that was introduced some checkpoint on some web sites.
But i hava not seen so much &amp;ldquo;how check&amp;rdquo;, i will introduce example on use Cloudwatch Logs Insight and CloudTrail to check IAM rule.
Narrow down IAM event First step, narrow down only IAM event.
sample query
fields eventSource, @timestamp | filter eventSource = &amp;quot;iam.amazonaws.com&amp;quot; &amp;lt;a href=&amp;quot;https://dtiemu0c7gxsz.cloudfront.net/image/AWS-Security-Monitoring-IAM/eventSource.png&amp;rdquo; data-rel=&amp;quot;lightbox-gallery-0QZwyEn5&amp;rdquo; data-rl_title=&amp;rdquo;&amp;rdquo; data-rl_caption=&amp;rdquo;&amp;rdquo; title=&amp;quot;&amp;ldquo;&amp;gt;Create New User example case, if you were stolen aws credential, attacker may create new user in use that credential.</description>
    </item>
    
    <item>
      <title>Amazon CloudWatch Logs Insights で SIEM ぽいことをやってみる</title>
      <link>https://uranari.com/tech/security/aws-siem-for-insights/</link>
      <pubDate>Thu, 03 Jan 2019 12:28:36 +0900</pubDate>
      
      <guid>https://uranari.com/tech/security/aws-siem-for-insights/</guid>
      <description>AWS re:Ivent 2018 では AWS Security Hub や KMS Custom Key Store などの新しいセキュリティ関連のマネージドサービスが発表されましたが、個人的に一番熱かったのが Amazon CloudWatch Logs Insights だったので紹介しておきます。
Amazon CloudWatch Logs Insights は従来の CloudWatch Logs のログをインタラクティブに検索できるものですが、概要だけ聞いたときに「それ SIEM じゃん」と思ったので、実際に SIEM として使えるか試してみました。
ここでは例として CloudTrail のログを分析対象とします。
あらかじめ CloudTrail のログを CloudWatch へ転送する設定を別途実施しておいてください。
今回は CloudTrail のログから S3 の特定のバケットに オブジェクトが作成された際にバケット名やオブジェクト名を絞る方法を説明します。
まず始めに CloudTrail のログを分析するときはログを eventSouce のフィールド毎に分けることをおすすめします。
話が脱線しますが、こういった SIEM のルールを作る際は上記の「S3のバケットにオブジェクトが作成された際のバケット名やオブジェクト名を知りたい」のようにルールの目的やアラートを発出する際の条件とそれが検知された際の調査項目などをあらかじめ整理しておくことをおすすめします。
典型的なダメダメなパターンは、とりあえず GuardDuty を ON にしたけどアラート飛んできてもこれがだめなものか分からないし、何を調査したらいいか分からないといったパターンです。
それアラート設定してる意味ないじゃんとなります。
話を戻して CloudWatch Logs Insight でのログの絞り込み方法です。
まず eventSource ごとに分けることをおすすめしましたので eventSource だけを表示させます。
&amp;lt;a href=&amp;quot;https://dtiemu0c7gxsz.cloudfront.net/image/aws-siem-for-insight/eventSource.jpg&amp;rdquo; data-rel=&amp;quot;lightbox-gallery-0QZwyEn5&amp;rdquo; data-rl_title=&amp;rdquo;&amp;rdquo; data-rl_caption=&amp;rdquo;&amp;rdquo; title=&amp;quot;&amp;ldquo;&amp;gt;ここから S3 のイベントに絞ってさらに特定のバケットのイベントに絞ると以下のようになります。</description>
    </item>
    
    <item>
      <title>技術書典4で購入した本のレビュー ～脆弱性ってなんだろう～</title>
      <link>https://uranari.com/tech/security/374/</link>
      <pubDate>Wed, 25 Apr 2018 09:36:34 +0000</pubDate>
      
      <guid>https://uranari.com/tech/security/374/</guid>
      <description>技術書典4で何冊か本を購入したのでレビューをしたいと思います。
まず最初になつよさん(@infragirl755)が出してた「脆弱性ってなんだろう？～CVSSを知ろう～」から。
この本では脆弱性そのものの説明は軽くで主にCVSSという脆弱性の危険度の評価基準についての解説が記載されている。
CVSSにはv2とv3というバージョンがあるがこの本ではv2について解説されている。
CVSSとは脆弱性の評価手法の１つで大きく3つの基準から構成されていて、またそれぞれの基準がいくつかの要素から構成されている。
(1)基本評価基準(Base Metrics)
(2)現状評価基準(Temporal Metrics)
(3)環境評価基準(Enviromental Metrics)
(1)基本評価基準(Base Metrics) 基本評価基準は以下の6つの基準から構成されている。
1.AV:攻撃元区分(Access Vector)
2.AC:攻撃条件の複雑さ(Access Complexity)
3.Au:攻撃前の認証可否(Authentication)
4.C:機密性への影響(情報漏えいの可能性、Confidentiality Impact)
5.I:完全性への影響(情報改ざんの可能性、Integrity Impact)
6.A:可用性への影響(業務停止の可能性)
(2)現状評価基準(Temporal Metrics) 現状評価基準はその時の脆弱性の危険度を表す。
1.E:攻撃される可能性(Exploitability)
2.RL:利用可能な対策のレベル(Remediation Level)
3.RC:脆弱性情報の信頼性(report Confidence)
一番危険なのは、脆弱性の対策方法がないにも関わらずインターネット上で脆弱性があるという情報とその具体的な攻撃手法の情報が出回っているときが一番危険。
(3)環境評価基準(Enviromental Metrics) 最後に環境評価基準です。これは脆弱性のあるソフトウェアを利用している環境ごとに異なるので一概にどうとは言えない。
1.COP:二次的被害の可能性(Collanteral Damage Potensial)
2.TD:影響を受ける対象システムの範囲(Target Distribution)
3.CR,IR,AR:対象システムのセキュリティ要求度(Security Requirements)
感想 自分は脆弱性の情報がでたときは評価基準の値とか見てなくて、主に見てるのは
「脆弱性を悪用した結果何ができるのか」(権限昇格なのか、DoSなのか、RCEなのか)
「その攻撃はリモートからできるのか」(インターネット越しにできるのか、LAN内にいないと駄目なのか)
「攻撃が成功する前提条件はあるか」(1つ上のやつも含まれるけどそれ以外にもログインしてる必要があるとか、事前に特定の情報を知っておく必要があるのか)
ぐらいで、後は脆弱性の深刻度を表すスコアくらいしか見てないのでたぶん脆弱性の会話をするときにこの評価基準の値がx.xで～とか言われても分からないかも…
これはDoSなのかRCEなのかでサービスが止まってしまうのか踏み台にされるのか最悪個人情報が抜かれるのかまでいっきに想定できるからってのと、攻撃の前提条件が分かればすぐに攻撃がやってくるのかどうかってのがある程度想定できるから。</description>
    </item>
    
    <item>
      <title>Dockerを使って脆弱性の検証環境を作成してみる　～Dockerイメージ作成編～</title>
      <link>https://uranari.com/tech/346/</link>
      <pubDate>Wed, 29 Nov 2017 03:03:56 +0000</pubDate>
      
      <guid>https://uranari.com/tech/346/</guid>
      <description>前回は公開されてるイメージから脆弱性の検証を実施してみたけど今回はイメージを作成するところからやってみる。
今回はTomcatのPUTの脆弱性(CVE-2017-12615～12617)を検証してみる。
まずはあらかじめ検証対象のTomcatをローカルに保存し、web.xmlにreadonly falseの設定を追加しておく。
なお今回はTomcat 7.0.79で検証してみた。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;default&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;org.apache.catalina.servlets.DefaultServlet&amp;lt;/servlet-class&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;debug&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;0&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;listings&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;false&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;readonly&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;false&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt; &amp;lt;/servlet&amp;gt;&amp;lt;/pre&amp;gt;   続いて以下のDockerfileを書いておく。
1 2 3 4 5  FROM centos:7 MAINTAINER uranari &amp;lt;uranaricb@gmail.com&amp;gt; RUN mkdir /usr/local/tomcat COPY tomcat /usr/local/tomcat RUN yum -y install --nogpgcheck java-1.8.0-openjdk-devel.x86_64   あとはこれをbuildして脆弱なイメージを作成する。</description>
    </item>
    
    <item>
      <title>Dockerを使って脆弱性の検証環境を作成してみる</title>
      <link>https://uranari.com/tech/334/</link>
      <pubDate>Wed, 18 Oct 2017 04:23:03 +0000</pubDate>
      
      <guid>https://uranari.com/tech/334/</guid>
      <description>Dockerを使って脆弱性の検証環境を作れば簡単に再利用できるし、イメージを配布してみんなで共有できれば個々人で検証環境立ててたのを誰かが作れば皆で検証できて良いんじゃないかなーと思ってDockerで検証環境を作成するのに挑戦してみました。
とは言いつつやっぱり似たようなことを既に先人たちが考えていて、同じようなことをやっている人がいました。
Dockerを使って、Apache Struts2の脆弱性S2-037のやられ環境を手軽に作る
Docker Hubを覗いてみるといい感じに既にできているものがあったので今回は他の人が公開しているイメージを使って検証環境を立てたいと思います。
 Windows上のHyper-VでDockerを動かして検証しようとしたのですが、docker-machineがうまく動いてくれなかったのでHyper-V上の192.168.30.99のIPでCnetOS7を立てて、その上でDockerを動かして検証しました。
1 2 3  [uranari@localhost ~]$ docker pull onedriver/s2-045 [uranari@localhost ~]$ docker run -d -p 8080:8080 --name s2-045 onedriver/s2-045   これで192.168.30.99:8080でStrutsの脆弱性S2-045の脆弱性を含むアプリケーションが動作します。
 あとはFiddlerでリクエストを書き換えて脆弱性を検証してみました。
今回は/etc/passwdの中身を表示させるリクエストを送信しています。
 今回は既に公開されているイメージを使用して検証環境を作成してみましたが、自分で検証用のイメージを作成して公開する記事も近々書きたいと思います。</description>
    </item>
    
    <item>
      <title>S2-048(CVE-2017-9791)を検証してみる</title>
      <link>https://uranari.com/tech/security/261/</link>
      <pubDate>Fri, 07 Jul 2017 21:29:59 +0000</pubDate>
      
      <guid>https://uranari.com/tech/security/261/</guid>
      <description>Struts2の脆弱性がアナウンスされていたので検証してみました。またRCEみたいです。
https://cwiki.apache.org/confluence/display/WW/S2-048
既にというかcwikiの該当のページが公開される前からチラホラと噂が流れてて公開とほぼ同じかそれより先のタイミングで攻撃コードも出回りはじめていたのでなんだかなーという気持ち。
ちなみにStruts 2.3.32で検証しました。
 偉い人が怖いので一部関係無い箇所も黒く塗りつぶしていますがidコマンドの実行結果が帰ってきていることが分かるかと思います。
上記のリンク先にも記載されていますが、今回の脆弱性はS2-045のときのようにStruts2を使用していれば存在しないページにも効くわけではなく、Struts 1 pluginを利用している場合のみ脆弱性が存在しているようです。
簡単にまとめると脆弱性が存在するのはStruts 2.3.xを使っていて且つStruts 1 pluginを利用している場合のみということになりそうです。
なお現段階(7月8日 AM 6:00)では修正バージョンは正式にはリリースされていませんが、Struts2.3.33がGitHubには公開されていますしコミットログを見ると2週間ほど前に修正されてるようなのでアップデートしても問題ないか検証はできるかもしれません。アプリケーションの実装の問題なのでおそらくパッチは出ないか出たとしても修正されるのは付属しているサンプルアプリケーションになると思います。
&amp;lt;追記&amp;gt;
自分はTocat7の上でStruts2.3.32を動かして検証しましたが、検証した際にTomcatのログを確認したところ以下のようなエラーが吐き出されていました。
アプリケーションの実装や使用するミドルウェア、実行されるOGNL式によってエラーの内容は変わると思いますが、同じような環境で自分が試したのと同じ攻撃コードが実行された場合は同じようなエラーログが吐かれると思うので注意が必要です。
/usr/local/tomcat7/logs/localhost.2017-07-08.log
 </description>
    </item>
    
    <item>
      <title>pcapファイルから特定のHTTPRequestとそのResponseを抜き出す</title>
      <link>https://uranari.com/tech/219/</link>
      <pubDate>Mon, 05 Jun 2017 12:43:36 +0000</pubDate>
      
      <guid>https://uranari.com/tech/219/</guid>
      <description>ネットワーク系のエンジニアなら誰しも数GBあるpcapファイルから特定のHTTPRequstとそのResponseだけを抜き出したくなることが何回かあるのではないでしょうか。
 やり方を書いてみます。
まずpcapファイルがありますね。
 このpcapファイルの中からこのブログ(www.uranari.io)にアクセスしているHTTPのRequestとそのResponseだけを抜き出して別のpcapに保存します。
 まず以下のようにtsharkを使用することで特定のHTTPRequestのstream番号が分かります。
1  $ tshark -r pcap.pcapng -R http.host==&amp;#34;www.uranari.io&amp;#34; -T fields -e tcp.stream   -R の後ろのDisplayFilterの条件を変えることでそれぞれのFilterで引っかかったHTTPのstream番号が分かるはずです。
後は出力されたstream番号でpcapファイルをfilterすればfilterしたHTTPRequestとそのResponseだけを抜き出すことができます。
以下のようにすれば最初からfilterとして出力できる。
1 2 3  $ tshark -r pcap.pcapng -R http.host==&amp;#34;www.uranari.io&amp;#34; -T fields -e tcp.stream | sort -un | sed -e &amp;#39;:loop; N; $!b loop; s/\n/ or tcp.stream==/g&amp;#39; 7 or tcp.stream==8 or tcp.stream==9 or tcp.stream==10 or tcp.stream==11 or tcp.stream==12 or tcp.stream==48 or tcp.stream==49 or tcp.stream==52 or tcp.</description>
    </item>
    
    <item>
      <title>サイバーセキュリティはだれのもの？</title>
      <link>https://uranari.com/poem/181/</link>
      <pubDate>Thu, 09 Mar 2017 17:16:08 +0000</pubDate>
      
      <guid>https://uranari.com/poem/181/</guid>
      <description>最近思っていることを書いておこうかなと。
将来自分の考え方が変わったときでもこの記事を振り返って「あの頃はこう思ってたなー」と振り返れるように。
これから書くことは筆者の個人的な観測範囲での話です。
いやそんなことないでしょとかひょっとすると言ってる本人は自覚なかったりするかもしれませんが。
さて、最近はセキュリティというものが盛り上がってるらしいですね。
個人的に盛り上がってるのはセキュリティ業界の人たちと何かインシデントが発生すると全国ニュースになってしまう大手の企業と一部のITリテラシーの高い人たちだけだというのが個人的な実感です。
以前こういう記事を読んだんですけど僕個人の実感としてはこっちのほうが近いというかむしろこれが現実でしょといった感じ。
 リテラシー{.keyword}の高い人たちの中だけで日々過ごしていると、とても居心地が良いし、日々心配するようなことって少ないと思う。でも、圧倒的大多数の人はそうじゃないんよな。自分たちはやっぱ少数派なんだなあって思う。
リテラシー{.keyword}の高い人たちにお願いしたい。
  地域の情報モラル{.keyword}の講演に足を運ぼう。
  消費生活センター{.keyword}の講演、セキュリティ{.keyword}の講演も。世の中の興味や関心はそこにないんだって、実感してきて。
 ところで皆さんはパスワード管理ソフトを使っていますか？2016年12月に情報処理推進機構（IPA）から「2016年度情報セキュリティに対する意識調査」という報告書が公開されています。これによれば「パソコンにインストールして使うアカウント管理ソフトウェアを使っている」人の割合は7%だそうです。
まぁなんでこんことを急に言いだしたかというとアカウントが乗っ取られたときに脆弱なパスワード使ってましたっていうとパスワード管理ソフト使いましょうとかそもそも脆弱なパスワードを使ってるやつが悪いって言う人を見ることがあるからなんですね。
脆弱なパスワード使ってるほうが悪いとか言ってる人は論外なんでいいですけど、皆さんパスワード管理ソフト使ってます？僕一応使ってますけどアレめんどくさくないですか？
毎回違うパスワード生成しないといけないのも面倒くさいしログインするたびにID/パスワードコピペするのも面倒くさいし自動ログインの設定も面倒くさいし、そもそもパスワード管理ソフトのパスワードどうすんのよとか。
後はワンタイムパスワードとかセキュリティと利便性のトレードオフの最たるものだと思ってますし。
別に使わないほうがいいとは言ってないですよ。使わないよりは使ったほうがいいです。ただめんどくさいだけです。
このブログを書いてる日付がちょうどサイバーセキュリティ月間というものなんですが、今年はソードアート・オンラインという作品とコラボしててそこで謳ってるのが「サイバーセキュリティは全員参加」という言葉なんですね。
でも上に書いたように現実はセキュリティとか気にしてるのってリテラシーの高い一部の人達だけで、じゃそれ以外のセキュリティをまったく気にしない人たちをどうするのってなるわけです。
僕はそもそもパスワード使いまわしちゃ駄目で推測しやすい文字列のパスワードは避けましょうとか、2段階認証を提供してるけどユーザーがそのオプション使ってませんでしたとか、やったほうが安全ですけどやってなかったときにユーザーに責任を負わせかねないようなことに反対なんですね。リテラシーのある人だけしか守りませんよって言ってるようなものだと思ってるので。
サイバーセキュリティはだれのもの？みんなのものです。
だからこそ全員参加ではなく、参加してるリテラシーの高い人だけじゃなくて、特に普段セキュリティを意識していない人たちがセキュリティを意識しなくても安全にネットを使うことができる仕組みを考える必要があると思ってます。
いつまでもパスワードの定期変更は有効かとか何文字以上で何種類の記号が使われていれば安全とか2要素認証も結局突破することは可能だとかくだらないことで何年間も同じことを議論してないで、いい加減そんなことを気にしなくてもどうやったら安全にネットを使うことができるかという方向に議論が進んでほしいと思ってます。</description>
    </item>
    
    <item>
      <title>ハニーポット観察記録を読んだ</title>
      <link>https://uranari.com/tech/33/</link>
      <pubDate>Thu, 02 Feb 2017 08:24:01 +0000</pubDate>
      
      <guid>https://uranari.com/tech/33/</guid>
      <description>morihi-socの森久さんがハニーポット本を出したので読んだ感想を書きます。
内容はハニーポットのログから攻撃手法や攻撃の傾向を調べてみようといったものです。ログからどういった脆弱性を狙った攻撃なのかだけでなく攻撃者の意図まで推測しようというところはさすがです。
この攻撃はbotで自動的に打たれてるのか、ただの愉快犯てきな攻撃なのか、脆弱性があるか調査してるだけなのか、本気でデータベースの情報を取りにきてるのかといったところまで想像を膨らませながら分析すると楽しいですね。
細かい内容はぜひ購入して読んでいただきたいのですが、Webサーバーの膨大なログの中から、この本で紹介されているような怪しいログをピンポイントで見つけられるようになるとまた新しい楽しさがあります。
ネットワークセキュリティアナリストってどんなことやってるの？とか外部のSOCに監視を依頼してるけど実際彼らがどんなことをしているかわからないので知りたいという人はこの本と合わせてオライリーのデータ分析によるネットワークセキュリティを読むと大体こんな感じでログを分析しているということがわかるのではないかなと思います。</description>
    </item>
    
  </channel>
</rss>