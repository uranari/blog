<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ssmjp on uranari</title>
    <link>https://uranari.com/categories/ssmjp/</link>
    <description>Recent content in ssmjp on uranari</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 26 Sep 2017 05:35:42 +0000</lastBuildDate>
    
	<atom:link href="https://uranari.com/categories/ssmjp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2017年9月のssmjpに参加してきたよ</title>
      <link>https://uranari.com/ssmjp/322/</link>
      <pubDate>Tue, 26 Sep 2017 05:35:42 +0000</pubDate>
      
      <guid>https://uranari.com/ssmjp/322/</guid>
      <description>2017年9月のssmjpに参加してきました。
伸弘辻のすべらないLT
今回は伸弘辻のすべらないLTということで、参加者が200人超えのssmjp史上最大の参加者数だったようです
今回のすべらないLTの挑戦者
・辻さん(@ntsuji)
・洲崎さん(@tigerszk)
・ykameさん(@ykame)
・togakushiさん(@togakushi)
・えにぐまさん(@enigma63)
以上5名でした。
どの話もとてもおもしろかったです。
えにぐまさんのドジした話とか、ykameさんの夜に消えた話とか（それやっちゃって大丈夫なの！？と本気で驚きました）
あと辻さんがMC凄い上手でさすが喋り慣れてるなとか、洲崎さんがタイトルだけで面白いとか、togakushiさんの話が涙なしで聞けないとか
MVSL(Most Valuable すべらない LT 賞)はえにぐまさんのIPAの試験を受けようとしたら会場を秋田で申し込んでしまい気づいたのが試験前日だったので飛行機で秋田まで受験に行った挙句落ちた話でした。すべったのに面白いとか卑怯すぎです。個人的には次点でykameさんの冷凍ピザの話が面白かったです。こっちも話が噛み合わずにすべってるのに面白かった。辻さんの診断してたらperlがバージョンアップされただけの話とか洲崎さんの診断太郎の話は脆弱性診断の仕事をしている人にはきっと刺さる話。
それぞれの話の詳細は以下のまとめを読むとお分かりいただけると思います。
#ssmjp 2017/09「伸弘辻のすべらないLT」まとめ
おまけ 準備中の風景
   </description>
    </item>
    
    <item>
      <title>2017年6月のssmjpに参加してきたよ</title>
      <link>https://uranari.com/ssmjp/231/</link>
      <pubDate>Tue, 04 Jul 2017 06:28:58 +0000</pubDate>
      
      <guid>https://uranari.com/ssmjp/231/</guid>
      <description>2017年6月のssmjpに参加してきました。
タイトルと発表者はそれぞれ以下の通り
信頼できる情報源の探し方 @YuhoKameda Kamedaさんは最近blogを書いていて、その中で情報をどこまで追っかけると信頼できるか検証しており、1日で1500～2000記事くらいをFeedlyで見ているとのこと。
Kamedaさんとしては、信頼できるソースとは
・一次ソースへのリンク等、その記事が基にした情報源を書いてある
・お役所などかたいところにインタビューしたような記事
・ベンダから出ている公式な情報
・セキュリティインシデントなどのときは被害者が直接出している情報
信頼できないソースとは
・書いている人の個人的な見解が入っている
Kamedaさんのやり方としては、MSの毎月出ているWindowsUpdateの場合だと
・MSの公式サイトに載っている英語ページ
・MSの公式に載っている日本語のページ
・MSの公式をもとに書かれたメディアの記事
の上から順に信頼できるソースとして普段は見ているそうです。
また全員が必ず一次ソースを見る必要はなく、現場のエンジニアはできるだけ一次ソースを参照したほうがいいけど、役員などのクラスの人はメディアのニュース記事で十分ではないかとのこと。
ビジネスに貢献するための運用設計　波田野さん 波田野さんの運用の話。
運用ってやっている方も何をやっているかうまく説明できない。
運用の定義からしましょうということで運用とは「サービスデリバリ」と定義していました。
運用をサービスデリバリと定義することでサービスとデリバリという2つの専門性で捉えられるとのこと。
サービスとは顧客の問題を解決することであり、デリバリとはサービスを顧客に安定的に提供すること。
つまり運用とはサービスデリバリのことであり、サービスデリバリとは顧客の問題を解決し安定的に提供することであり、運用とは実質フルスタックのことである。
とはいえ1人でフルスタックは辛いのでチームでフルスタックができるようになるといい。
エンジニアは現場視点で物事を考えるので現場にとって最適な解をとりがちだが、本当はビジネスや会社にとって最適な解を取る必要がある。
　→現場が楽になることと会社の利益になることがぶつかりがちになることが多いため
現実的な手段として、作業する際のマニュアルや運用に作業を依頼する際の手順をしっかりと整備して記録に残るようにすることで運用がどれだけ顧客の問題を解決できたか客観的に評価できるようになるといい。
波田野さんは品川のJAISTサテライトキャンパスでビジネスモデルキャンパスを学んでおり、それを基に考えているそうです。
AWS LambdaとDynamoDBがこんなにツライはずがない @nekoruri [slideshare id=77408438&amp;amp;doc=20170630ssmjppainfularchitecture-170630184007]
@nekoruriさんのAWS LambdaとDynamoDBでサーバーレスなシステムを作ったお話。
純粋にLambdaとDynamoDBがつらいというお話でした。
ここの話は一部しか理解できなかったのでメモってあることをまとめただけです。
構成としては
BLEメッシュ → SORACOM → Kinesis Stream → Lambda → DynamoDB
Lambdaの辛い点
・ログがCloudWatch Logsに保存されるがどこかでバッファされてるのか遅れてくる
・あらかじめ確保するメモリのサイズを指定しないといけないが、実際に消費したメモリサイズはログを見ないと分からない
・EC2も使えるけどスケールに時間がかかりすぎる
・KinesisからLambdaにデータを渡すとき基本的に1シャード1プロセスでありLambdaは連続実行している限り同じプロセスを使いますが、あくまで1シャードに対して割り当てられるのが1プロセスであり、裏で複数のプロセスが起動していて待機していないとは言っていない？
・Networkレベルでの認証がないので認証はIAMRoleで頑張る
DynamoDBの辛い点
・DynamoDB自体がKeyValueStore(KVS)なのでデータが増えるとソートキーで頑張ろうとするとデータが分散せずにいつか死ぬ
・同様にデータが増えるとScanクエリでテーブルを全部舐めるのでいつか死ぬ
・DynamoDBは課金体系的に高くつく
・そもそもKVSだけでシステムを作るのが辛い
・Kinesis FirehouseとKinesis Analyticsが東京リージョンに来ればプログラムを書かずにシステムを作るのも夢じゃない
感想 Kamedaさんの話は最近WannaCryとかNeoPetyaとか各セキュリティベンダの出す情報が食い違ってて情報が結構錯綜していたので他の人どうしてんだろなーと思ってたところなのでそのへんをKamedaさんはどうしてるのかとか質問してみたりと自分の中では結構ジャストタイミングでの話でした。
波田野さんの運用の話は自分も最近はずっと運用の仕事をしているので現場は部分最適化しがちと言われたところで胸に刺さったりと耳が痛い。。。</description>
    </item>
    
    <item>
      <title>2017年2月のssmjpに参加してきたよ</title>
      <link>https://uranari.com/ssmjp/71/</link>
      <pubDate>Tue, 21 Feb 2017 11:19:30 +0000</pubDate>
      
      <guid>https://uranari.com/ssmjp/71/</guid>
      <description>2017年2月のssmjpに参加してきました。
4人の発表者がいてタイトルはそれぞれ以下の通り
米国のペネトレーションテスト事情 Tomohisa Ishikawa 最近のアメリカでのペネトレーションテスト事情についてのLTでした。
日本だとペネトレーションテスト＝脆弱性診断ですがアメリカだとRedTeamが主流になっているとのこと。
RedTeamというとセキュリティ業界以外の人にはわかりづらいと思うので日本語に直すと「侵入テスト」といったところでしょうか。
日本のペネトレーションテストはWebアプリケーションやミドルウェアなどの外部に公開されているサービスに脆弱性があるかをブラックボックスでテストするのが一般的ですが、アメリカのRedTeamでは実際に情報を持ち出すことが可能かをテストしています。
日本のペネトレーションテストは脆弱性の有無を調査することが目的ですが、アメリカのペネトレーションテストは情報を窃取することが可能かを実際にやってみて調査することが目的だと感じました。
RedTeamはdigital、social、physicalの3つの分野にまたがってテストが実施されているそうです。
digitalはネットワーク経由で侵入できるかや、socialはOSINT等でその企業や従業員の情報を収集し、電話やメールを使い従業員や役員、関係者になりすましてオペレーター等から企業の機密情報を聞き出せるかや、physicalは鍵穴をピッキングして建物や施設内に侵入したり偽の従業員証を作成して従業員になりすまして施設内に侵入し、情報を持ち出すことができるかをテストしているそうです。
RedTeamは最終的に情報を持ち出すことができるかをテストしており、その過程で警備員に取り押さえられたり警察に通報されて警察沙汰になったりする可能性も想定されているそうです。
さらに、digitalは従来通りハッキングに長けた人が実施したり、socialは心理学者を雇ったりphysicalは鍵屋を雇ったりと映画みたいにそれぞれの専門分野の人が集まってチームを組んで実施したりと本格的です。
アメリカで主流になっているということは日本でも2〜3年後には主流になると思います…と言いたいところですがRedTeamは実際に通常業務を行なっている環境で期間も半年など長期間かけて従業員や管理者も目の前で起こっていることが実際のインシデントなのかRedTeamによる侵入テストなのか判断できない状態で実施するので業務に影響が出ることを極端に嫌がる日本では受け入れられない気がします。
RSA暗号運用でやってはいけないNのこと @y_hag [slideshare id=72368516&amp;amp;doc=sonickunrsa-170220153940]
次はRSA暗号の運用についてのLTでした。
この話は筆者が暗号は素因数分解が困難（素因数分解に時間がかかりすぎて現実的な時間では解けない）ことが前提になっているという程度にしか理解していないので詳しく解説できません。。。
前提としてRSA暗号のアルゴリズムと768bitまでの鍵長の鍵は既に解かれていて、1024bitもそろそろ危険だとして非推奨になっていることを説明されてから、公開鍵暗号方式を使用して秘密鍵と公開鍵を生成する際や、平文を暗号化する際に気をつけておくべきポイントについてお話されてました。
以下にRSA暗号を運用する際に気をつけるべきポイントとして挙げられていた点をいくつか紹介します。
・合成数 n を生成する p と q の値が小さすぎてはいけない
・p と q の値が近すぎてはいけない
・p と q の値にメルセンヌ素数やフェルマー素数を使ってはいけない
・公開鍵を複数作成するときに同じ素数を使いまわしてはいけない
・任意の暗号文を複合した偶奇1bitを知られてはいけない
・上位ビットが共通する２つの平文の暗号文を知られてはいけない
・素数ｐの上位または下位bitを知られてはいけない
他にもいくつか紹介されていましたが理解とメモを取るスピードが追いつきませんでした。
暗号は今年勉強するテーマの1つですが、暗号の種類とそれぞれの計算量的な強度、使用されるシチュエーションくらいで理論的な部分まではちょっと踏み込めないかな。
君のHashは @abend [slideshare id=72367571&amp;amp;doc=hash20170220-170220151618]
Windowsのアカウント管理で用いられているLMハッシュとNTLMハッシュのお話。
LMハッシュはさすがにもう使われていないでしょということで主にNTLMハッシュのお話です。
Windowsではアカウントのパスワードハッシュを認証に使用できますがsaltを用いないため、同じ文字列を用いると同じハッシュ値になります。
これを利用してWindowsでパスワードを知らなくても認証を突破できる「Pass the Hash」という攻撃手法があります。
しかし、WindowsにはUser Account Control(UAC)という機能があり、管理者権限が必要な動作やシステムに変更を加える動作をする際に再度確認をする機能があり、仮に管理者アカウントののユーザー名とパスワードのNTLMハッシュを取得できたとしてもそのままコマンドが実行されるわけではありません。(何かプログラムをインストールしようとした際にポップアップが表示されて「はい」を押さないといけないアレです)
ただWindowsには、Windowsをインストールした際にデフォルトで作成されるローカルの「Administrator」というアカウントがあり、このアカウントでシステムに管理者権限が必要な動作やシステムへの変更を加える際はUACが働かず、このアカウントのNTLMハッシュが抜き取られた場合は外部からの攻撃に気づきにくく攻撃者のコマンドがそのまま実行されてしまうそうです。
なのでWindowsをインストールした際には別の管理者アカウントを作成し、「Administrator」は削除することをお勧めされていました。
またWindows10以降の世代ではSAMファイルのNTLMハッシュがnullになっていたり、メモリ上から情報を抜き取ろうとしても「LSA Protection Mode」が有効になっていればメモリにアクセスですることが困難になるためそれまでの世代よりは安全性が高いのではないかとのことです。
発表のテンポとネタが面白すぎるのは卑怯だと思います。
サイバー考古学 @delphinz [slideshare id=72391760&amp;amp;doc=2017-170221033514]
最後は田端さんのインターネットの歴史にまつわるお話です。
大学の講義とかだとインターネットの歴史として原型となったARPANETの話から利用が学術機関や商用へと広がっていった話は聞くと思いますが、これはその過程でインターネット上での自由のために戦った人たちや現在のコンピューターで使われているマウスやGUIの概念を発明した人たちのお話でした。
このスライドは近所の中学生が王様のヴァイキングを読んでハッカーに憧れてプログラミングを教えてほしいと頼まれたので、その前にインターネットについて知ってもらおうと作成したスライドだそうです。近所の中学生のためにここまでのスライドを作成する熱意がもう田端さん自身もHackerであることの証だなと思いました。</description>
    </item>
    
  </channel>
</rss>