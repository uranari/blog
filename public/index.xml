<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uranari dayo</title>
    <link>https://www.uranari.io/</link>
    <description>Recent content on uranari dayo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 01 May 2019 11:20:49 +0900</lastBuildDate>
    
	<atom:link href="https://www.uranari.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS Security Monitoring -IAM-</title>
      <link>https://www.uranari.io/tech/aws/aws-security-monitoring-iam/</link>
      <pubDate>Wed, 01 May 2019 11:20:49 +0900</pubDate>
      
      <guid>https://www.uranari.io/tech/aws/aws-security-monitoring-iam/</guid>
      <description>AWS Security Monitoring, that was introduced some checkpoint on some web sites.
But i hava not seen so much &amp;ldquo;how check&amp;rdquo;, i will introduce example on use Cloudwatch Logs Insight and CloudTrail to check IAM rule.
Narrow down IAM event First step, narrow down only IAM event.
sample query
fields eventSource, @timestamp | filter eventSource = &amp;quot;iam.amazonaws.com&amp;quot;  
Create New User example case, if you were stolen aws credential, attacker may create new user in use that credential.</description>
    </item>
    
    <item>
      <title>Amazon CloudWatch Logs Insights で SIEM ぽいことをやってみる</title>
      <link>https://www.uranari.io/tech/security/aws-siem-for-insights/</link>
      <pubDate>Thu, 03 Jan 2019 12:28:36 +0900</pubDate>
      
      <guid>https://www.uranari.io/tech/security/aws-siem-for-insights/</guid>
      <description>AWS re:Ivent 2018 では AWS Security Hub や KMS Custom Key Store などの新しいセキュリティ関連のマネージドサービスが発表されましたが、個人的に一番熱かったのが Amazon CloudWatch Logs Insights だったので紹介しておきます。
Amazon CloudWatch Logs Insights は従来の CloudWatch Logs のログをインタラクティブに検索できるものですが、概要だけ聞いたときに「それ SIEM じゃん」と思ったので、実際に SIEM として使えるか試してみました。
ここでは例として CloudTrail のログを分析対象とします。
あらかじめ CloudTrail のログを CloudWatch へ転送する設定を別途実施しておいてください。
今回は CloudTrail のログから S3 の特定のバケットに オブジェクトが作成された際にバケット名やオブジェクト名を絞る方法を説明します。
まず始めに CloudTrail のログを分析するときはログを eventSouce のフィールド毎に分けることをおすすめします。
話が脱線しますが、こういった SIEM のルールを作る際は上記の「S3のバケットにオブジェクトが作成された際のバケット名やオブジェクト名を知りたい」のようにルールの目的やアラートを発出する際の条件とそれが検知された際の調査項目などをあらかじめ整理しておくことをおすすめします。
典型的なダメダメなパターンは、とりあえず GuardDuty を ON にしたけどアラート飛んできてもこれがだめなものか分からないし、何を調査したらいいか分からないといったパターンです。
それアラート設定してる意味ないじゃんとなります。
話を戻して CloudWatch Logs Insight でのログの絞り込み方法です。
まず eventSource ごとに分けることをおすすめしましたので eventSource だけを表示させます。

ここから S3 のイベントに絞ってさらに特定のバケットのイベントに絞ると以下のようになります。</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.uranari.io/about/</link>
      <pubDate>Sun, 28 Oct 2018 13:06:19 +0900</pubDate>
      
      <guid>https://www.uranari.io/about/</guid>
      <description>uranariです。 都内のIT系の会社で働いています。
twitter:@uranariz</description>
    </item>
    
    <item>
      <title>ハッカーズチャンプルー2018 にボランティアスタッフとして参加してきた。</title>
      <link>https://www.uranari.io/tech/383/</link>
      <pubDate>Sun, 08 Jul 2018 13:30:21 +0000</pubDate>
      
      <guid>https://www.uranari.io/tech/383/</guid>
      <description>毎年沖縄で開催しているハッカーズチャンプルーというイベントがあるのですが、今年のそのイベントにボランティアスタッフとして参加してきました。
目次  1 ハッカーズチャンプルーとは   2 ボランティアスタッフって何やるの？   3 個人的に一番よかった講演   4 感想    ハッカーズチャンプルーとは 詳しくは公式サイトを見て欲しいのですが、簡単に書くと沖縄県内のIT関連のコミュニティが集まって沖縄県外からゲストの方を呼んで開催するカンファレンスです。
講演の合間には立候補者によるLTもあったりしてけっこう賑やかなイベントになっています。
ボランティアスタッフって何やるの？ 今年のハッカーズチャンプルーの内容については他の方々がすでに記事を書いているので、ボランティアスタッフって何をやっていたのかを少し書きます。
今回のハッカーズチャンプルー2018でボランティアスタッフとしてやったことを書きますが、他のカンファレンスだったり勉強会でも手伝うことはだいたい同じですので、来年の運営を手伝いたいという方はご参考にどうぞ。
ボランティアスタッフがやってたこと
 会場の設営・撤収 受付 会場案内 お弁当の配布 懇親会会場までの案内  基本的にどのイベントや勉強会でも当日スタッフとかボランティアスタッフみたいな形で運営を手伝う場合にやることって限られてて受付と会場の設営と撤収が主になると思います。
それよりもっと深く関わりたいという場合は運営のコアメンバーに入りましょう。
ゲストに誰を呼ぶかとか会場をどこにするかとか予算とか、そっちは面白いんですけどタスクが重そう。
ちなみに私は会場の設営・撤収と入り口の案内を手伝っていました。
スタッフとして参加するとスタッフTシャツがもらえます。ハッカーズチャンプルーのスタッフTシャツがもらえるのはここだけです。
個人的に一番よかった講演 ハッカーズチャンプルーは沖縄県外からゲストの方をお呼びして登壇してもらうというスタイルです。今年の講演はどれも素晴らしいものでしたが、個人的に一番だったのは、はてなのCTOである大坪さんの『ソフトウェア開発と私』という講演でした。
小学生の頃に学校のドリルを解くためのプログラムを書いた話から始まってコミュニティとの出会いや、チームメンバーとしてコードを書くということ、はじめての登壇での失敗から自信をもって人前で話せるようになるまでと、１人のソフトウェアエンジニアの叙事詩で自分の失敗談も含めて人前で話せるっていいなと思いました。
ちなみに懇親会で大坪さんと琉球大学の学生さんと沖縄のA&amp;amp;W(ローカルハンバーガーチェーン店)のルートビアはサロンパスの味がします。サロンパスを食べたことがある人なら分かりますと話してたところ実際に飲んでいただけたようで、確かにサロンパスの味がする、サロンパス食べたことがあるから分かると大変好評？のようでしたｗ
感想 ハッカーズチャンプルーは2014年以来の参加でしたが、相変わらずこの沖縄特有のユルさがお気に入りです。
ボランティアスタッフ、簡単に言うと準備と片づけを手伝う（細かくすると他にもあるけど）くらいなので、手伝いたいなと思うかたは気軽に手を挙げてみるといいと思います。
懇親会は私が開発者じゃないのもあっていつものごとく会話に入れずボッチしてました。
また来年。</description>
    </item>
    
    <item>
      <title>技術書典4で購入した本のレビュー ～脆弱性ってなんだろう～</title>
      <link>https://www.uranari.io/tech/security/374/</link>
      <pubDate>Wed, 25 Apr 2018 09:36:34 +0000</pubDate>
      
      <guid>https://www.uranari.io/tech/security/374/</guid>
      <description>技術書典4で何冊か本を購入したのでレビューをしたいと思います。
まず最初になつよさん(@infragirl755)が出してた「脆弱性ってなんだろう？～CVSSを知ろう～」から。
この本では脆弱性そのものの説明は軽くで主にCVSSという脆弱性の危険度の評価基準についての解説が記載されている。
CVSSにはv2とv3というバージョンがあるがこの本ではv2について解説されている。
CVSSとは脆弱性の評価手法の１つで大きく3つの基準から構成されていて、またそれぞれの基準がいくつかの要素から構成されている。
(1)基本評価基準(Base Metrics)
(2)現状評価基準(Temporal Metrics)
(3)環境評価基準(Enviromental Metrics)
目次  1 (1)基本評価基準(Base Metrics)   2 (2)現状評価基準(Temporal Metrics)   3 (3)環境評価基準(Enviromental Metrics)   4 感想    (1)基本評価基準(Base Metrics) 基本評価基準は以下の6つの基準から構成されている。
1.AV:攻撃元区分(Access Vector)
2.AC:攻撃条件の複雑さ(Access Complexity)
3.Au:攻撃前の認証可否(Authentication)
4.C:機密性への影響(情報漏えいの可能性、Confidentiality Impact)
5.I:完全性への影響(情報改ざんの可能性、Integrity Impact)
6.A:可用性への影響(業務停止の可能性)
(2)現状評価基準(Temporal Metrics) 現状評価基準はその時の脆弱性の危険度を表す。
1.E:攻撃される可能性(Exploitability)
2.RL:利用可能な対策のレベル(Remediation Level)
3.RC:脆弱性情報の信頼性(report Confidence)
一番危険なのは、脆弱性の対策方法がないにも関わらずインターネット上で脆弱性があるという情報とその具体的な攻撃手法の情報が出回っているときが一番危険。
(3)環境評価基準(Enviromental Metrics) 最後に環境評価基準です。これは脆弱性のあるソフトウェアを利用している環境ごとに異なるので一概にどうとは言えない。
1.COP:二次的被害の可能性(Collanteral Damage Potensial)
2.TD:影響を受ける対象システムの範囲(Target Distribution)
3.CR,IR,AR:対象システムのセキュリティ要求度(Security Requirements)
感想 自分は脆弱性の情報がでたときは評価基準の値とか見てなくて、主に見てるのは
「脆弱性を悪用した結果何ができるのか」(権限昇格なのか、DoSなのか、RCEなのか)
「その攻撃はリモートからできるのか」(インターネット越しにできるのか、LAN内にいないと駄目なのか)</description>
    </item>
    
    <item>
      <title>今年1年でも振り返ってみる</title>
      <link>https://www.uranari.io/poem/360/</link>
      <pubDate>Sun, 31 Dec 2017 05:05:39 +0000</pubDate>
      
      <guid>https://www.uranari.io/poem/360/</guid>
      <description>年末年始にお休みをもらうことに成功したのでたまにはblogでも書こうかと。
さて自分は今年何をしたのか振り返ってみたものの、何をしたんだっけ？といった感じです。
まず今年どこに行ったか振り返ってみる。
まず3月に富山、石川、福井を巡って岐阜を経由して帰ってくるという旅をした。富山湾越しに眺める立山連峰が美しかったのでおすすめです。
5月のGWは神戸に行ってた。神戸は中華街があるって点もそうだけどそれ以外にも街の雰囲気がどこか横浜っぽかった。そんなに横浜に詳しいわけでもないけど。
6月に友人とその知り合いたちと伊豆の下田あたりまで温泉宿泊に行って夜はセキュリティ人狼で盛り上がったりしてたが自分はその隣でまったりお酒を飲んでた。この時に新しい友人もできたし色んな人と知り合えた。
8月は友人に会いに岩手に行ってた。彼はセキュリティ・ミニキャンプ沖縄に彼がわざわざ岩手から来た時からの付き合いで去年の夏に彼が東京に来た時以来だからちょうど1年ぶりの再会だった。岩手の山の上にある温泉郷で宿をとったが村の中に温泉の湧く公園とかあって夜はそこで足湯に浸かって天体観測とかしてた気がする。
9月は大阪に行くついでに京都に寄って貴船神社と鞍馬寺に行ってきた。鞍馬寺に行ってからくらま温泉に浸かって帰るのおすすめです。
11月に淡路島に行った。猫美術館というのがあって猫の絵が飾られてるんだけど描いた人がどれだけ猫を愛してるかが伝わってくる美術館だった。
今年行った場所はこんな感じ。
コミュニティ活動だとMINI Hardenigというイベントの運営をやっていて今年は4回開催した。
5月の神戸と9月の大阪はそれぞれMINI Hardenigをやるために関西に行ってた。8月に開催した後にメンバーが１人増えたけど「運営を見ていて楽しそうだったから」と言ってもらえたのが嬉しかったですね。
まずは楽しくってのがモットーなのとこういう活動を通して他の人に楽しそうだから自分もやりたいとか夢を持ってもらえてたらいいなと思ってたり。
技術面だと8月にマルウェア解析のトレーニングを受けた。今までほぼ独学だったのでキチンと手順が学べるの嬉しい。
がしかしuranariは低レイヤのことが全く分からぬ。uranariは文系出身である。
ITに文系理系関係ないというが、情報科学(computer science)をきちんと修めてるか否かは同じ技術者であっても素人と研究者の違いがある。新卒の時に一緒にOJTを受けた圧倒的に優秀な修士卒の同期にはその歴然たる差を見せつけられたのでコンプレックスである。
というわけで働きはじめて以来、ちょくちょく彼のおすすめする本を読んでいる。最近だとパタヘネ(第2版)をちまちま読んでいる。この年末年始の休みでいっきに読み進めていてこの記事はその息抜きに書いている。
修士卒の会社の後輩にどれくらいできれば学部卒と同じくらいの情報科学を修めてるって言える？と聞いたら応用情報処理技術者試験に受かればだいたい言えると聞いたので4月か8月には受かるようにしよう。
ここから雑感
あとは色々とPodcastを聞くようになった。
定番なのはrebuild.fmかな。Webのトレンドを追いかけていたいならmozaic.fmがおすすめ。マネジメントとかのエモい話が聞きたいならomoiyari.fmがいいと思う。
個人的に気に入ってるのはyatteiki.fm。
セキュリティ系だとセキュリティのアレがあるけど一般人向けの解説みたいな感じで後から気になった話題について話してたら聞くくらいなスタンス。他のPodcastみたいにリアルタイムでは追いかけていない。
他には今年を通して健康は大事だということを実感した。
blogやtwitterで色んな人が言っているがそれを他人事じゃないと本気で感じた。
友人が倒れて入院したけど大事にならなくて退院したら今度は別の友人が癌になったりと、そういうことが立て続けに起こったのとどちらも同い年なので健康とか保険とか本気で考えるようになった。
若くても人間ドック受けよう。
来年の目標はまだ何も考えていない。
&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;-
2018年1月1日 17時 追記</description>
    </item>
    
    <item>
      <title>Dockerを使って脆弱性の検証環境を作成してみる　～Dockerイメージ作成編～</title>
      <link>https://www.uranari.io/tech/346/</link>
      <pubDate>Wed, 29 Nov 2017 03:03:56 +0000</pubDate>
      
      <guid>https://www.uranari.io/tech/346/</guid>
      <description>前回は公開されてるイメージから脆弱性の検証を実施してみたけど今回はイメージを作成するところからやってみる。
今回はTomcatのPUTの脆弱性(CVE-2017-12615～12617)を検証してみる。
まずはあらかじめ検証対象のTomcatをローカルに保存し、web.xmlにreadonly falseの設定を追加しておく。
なお今回はTomcat 7.0.79で検証してみた。
&amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;default&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;org.apache.catalina.servlets.DefaultServlet&amp;lt;/servlet-class&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;debug&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;0&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;listings&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;false&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;readonly&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;false&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt; &amp;lt;/servlet&amp;gt; 続いて以下のDockerfileを書いておく。
FROM centos:7 MAINTAINER uranari &amp;lt;uranaricb@gmail.com&amp;gt; RUN mkdir /usr/local/tomcat COPY tomcat /usr/local/tomcat RUN yum -y install --nogpgcheck java-1.8.0-openjdk-devel.x86_64 あとはこれをbuildして脆弱なイメージを作成する。
docker build -t uranari/tomcat_put_vuln . これをリポジトリにpush
docker push uranari/tomcat_put_vuln 実際に検証を実施してみる。
pushしたイメージを持ってきてコンテナを作成し、tomcatを起動させ検証する。
前回と同じ「192.168.30.99」のCentOS上でコンテナを作成して検証しています。
docker run -it -d -p 8080:8080 --name tomcat_put_vuln uranari/tomcat_put_vuln /bin/bash コンテナを作成したらコンテナの中に入って/usr/local/tomcat/bin/startup.shを叩いてtomcatを起動させてください。
これでtomcatが起動します。
では実際に脆弱性の検証を実施してみましょう。
まずブラウザでアクセスできることを確認します。</description>
    </item>
    
    <item>
      <title>Dockerを使って脆弱性の検証環境を作成してみる</title>
      <link>https://www.uranari.io/tech/334/</link>
      <pubDate>Wed, 18 Oct 2017 04:23:03 +0000</pubDate>
      
      <guid>https://www.uranari.io/tech/334/</guid>
      <description>Dockerを使って脆弱性の検証環境を作れば簡単に再利用できるし、イメージを配布してみんなで共有できれば個々人で検証環境立ててたのを誰かが作れば皆で検証できて良いんじゃないかなーと思ってDockerで検証環境を作成するのに挑戦してみました。
とは言いつつやっぱり似たようなことを既に先人たちが考えていて、同じようなことをやっている人がいました。
Dockerを使って、Apache Struts2の脆弱性S2-037のやられ環境を手軽に作る
Docker Hubを覗いてみるといい感じに既にできているものがあったので今回は他の人が公開しているイメージを使って検証環境を立てたいと思います。
Windows上のHyper-VでDockerを動かして検証しようとしたのですが、docker-machineがうまく動いてくれなかったのでHyper-V上の192.168.30.99のIPでCnetOS7を立てて、その上でDockerを動かして検証しました。
[uranari@localhost ~]$ docker pull onedriver/s2-045 [uranari@localhost ~]$ docker run -d -p 8080:8080 --name s2-045 onedriver/s2-045 これで192.168.30.99:8080でStrutsの脆弱性S2-045の脆弱性を含むアプリケーションが動作します。
あとはFiddlerでリクエストを書き換えて脆弱性を検証してみました。
今回は/etc/passwdの中身を表示させるリクエストを送信しています。
今回は既に公開されているイメージを使用して検証環境を作成してみましたが、自分で検証用のイメージを作成して公開する記事も近々書きたいと思います。</description>
    </item>
    
    <item>
      <title>2017年9月のssmjpに参加してきたよ</title>
      <link>https://www.uranari.io/ssmjp/322/</link>
      <pubDate>Tue, 26 Sep 2017 05:35:42 +0000</pubDate>
      
      <guid>https://www.uranari.io/ssmjp/322/</guid>
      <description>2017年9月のssmjpに参加してきました。
伸弘辻のすべらないLT
今回は伸弘辻のすべらないLTということで、参加者が200人超えのssmjp史上最大の参加者数だったようです
今回のすべらないLTの挑戦者
・辻さん(@ntsuji)
・洲崎さん(@tigerszk)
・ykameさん(@ykame)
・togakushiさん(@togakushi)
・えにぐまさん(@enigma63)
以上5名でした。
どの話もとてもおもしろかったです。
えにぐまさんのドジした話とか、ykameさんの夜に消えた話とか（それやっちゃって大丈夫なの！？と本気で驚きました）
あと辻さんがMC凄い上手でさすが喋り慣れてるなとか、洲崎さんがタイトルだけで面白いとか、togakushiさんの話が涙なしで聞けないとか
MVSL(Most Valuable すべらない LT 賞)はえにぐまさんのIPAの試験を受けようとしたら会場を秋田で申し込んでしまい気づいたのが試験前日だったので飛行機で秋田まで受験に行った挙句落ちた話でした。すべったのに面白いとか卑怯すぎです。個人的には次点でykameさんの冷凍ピザの話が面白かったです。こっちも話が噛み合わずにすべってるのに面白かった。辻さんの診断してたらperlがバージョンアップされただけの話とか洲崎さんの診断太郎の話は脆弱性診断の仕事をしている人にはきっと刺さる話。
それぞれの話の詳細は以下のまとめを読むとお分かりいただけると思います。
#ssmjp 2017/09「伸弘辻のすべらないLT」まとめ
おまけ 準備中の風景</description>
    </item>
    
    <item>
      <title>なぜWebサイトをHTTPSに対応させなければならないのか</title>
      <link>https://www.uranari.io/poem/308/</link>
      <pubDate>Tue, 22 Aug 2017 03:34:05 +0000</pubDate>
      
      <guid>https://www.uranari.io/poem/308/</guid>
      <description>GoogleのChromeがChrome62から入力欄を持つ非HTTPSのサイト全てに警告を出すということがニュースになっていたので、その経緯について簡単に書いておきます。
ただ、これから書くことは昨年のSymantecの子会社による不正な証明書の発行に関するニュースや記事を追っていた際についでに拾った情報をまとめて推測してみたらこういう話になったというだけで、その関係で一部情報元が確認できなかった情報もありますし、Googleがはっきりとこうだと言っているわけでもありませんので読み物として読んでみてください。
業界全体の流れとしてそういう方向に向かっているというだけの話です。
さて、事の発端はNSAによる市民の監視プロジェクト、PRISM計画の存在を明るみにしたスノーデン・ショックです。
PRISM計画の詳細については省きますが、NSAがMicrosoftやGoogleなどに情報を収集できるバックドアを仕掛け一般人をも含め監視していたというこの計画では、そういった各企業に仕掛けたバックドアから得た情報の他に海底ケーブルや基地局からも情報を収集し分析していました。
なお、このPRISM計画の中で直接名指しされた企業はNSAへの協力をハッキリとは認めてはいません。
Googleはこの事件の発覚前から透明性レポートというものを出しており、政府から要請のあった情報請求と実際に提供した件数などを公開していましたが、このPRISM計画に関係するものは含まれていなかったのではないかとされています。
また、Google以外の企業もこの事件の発覚以降、Googleの透明性レポートと同じようなものを定期的に公開するようになっています。
基本的にネットワークを流れる通信を盗聴した場合、その通信内容が暗号化されていれば具体的な通信の内容は確認できませんが、暗号化されていなければ確認することができます。
さて、問題はこの暗号化されていない通信の内容に含まれる情報です。
ここではWebの通信に限って話を進めますが、氏名や住所などの個人情報や、クレジットカード番号などが含まれていなければ通信は暗号化しなくともよいというのが一般的な考え方でした。
しかし、Webの通信には広告などのためにユーザーを識別できる情報や、閲覧しているサイトを見る直前のサイトの情報などのメタ情報が多く含まれています。
また、通信内容に個人情報が含まれていなかったとしても、通信しているユーザーが医療情報サイトを多数閲覧していれば本人か家族に健康に不安があるんだなと推測できますし、イスラム教の教えを説いているサイトを閲覧していればこの人はイスラム教に興味がある、または信者なんだと推測することができます。
実際には通信内容が暗号化されていても、ユーザーがどのドメイン名のWebサイトを閲覧しているかは分かります。
NSAはこういった通信内容に含まれるメタ情報を大量に収集して、ユーザーの人種や宗教、思想、年収、イデオロギーなどを分析するのに活用していました。
このことが明るみになってからアメリカのセキュリティ界隈では、例え個人情報などを収集していなくても、WebサイトをHTTPSに対応させユーザーを保護するべきだという声が大きくなっています。
Symantec子会社の不正証明書発行事件の際もそうでしたが、特にGoogleは過激派先進的なので、Chromeに今回の入力欄を持つ非HTTPSなサイトへの警告などの独自実装を取り入れてたり、検索エンジンで非HTTPSなサイトよりHTTPSのサイトを優遇していたりします。
Googleは将来的には全ての非HTTPSのサイトに対してChromeで警告を出したいと考えているようですので、今回の仕様の変更はそのためのステップの１つに過ぎないのかもしれません。
他のブラウザベンダーがこの動きに追従するかは不明ですが、アメリカのセキュリティ業界ではWebサイトは基本的にHTTPSに対応させるべきだという流れになっています。
つい先日、シカゴの有権者データがAWSのS3で公開状態になっていた件がニュースになっていましたが、記事の中でデータの管理を請け負っていたElection Systems &amp;amp; SoftwareのWebサイトがHTTPSに対応していないことが指摘されており、特に企業サイトなどはHTTPSに対応していないことがセキュリティリスクだとして指摘されるようになる日も遠くないのかもしれません。
ここからは余談ですが、スノーデン・ショックで注目を浴びるようになったのがLet&amp;#8217;sEncryptです。
もともとスノーデン・ショック以前から一部の研究者によってWebから大量のメタ情報を収集することにより個人の特定や分析が可能だということは指摘されていましたが、あまり現実的ではないと思われていました。
Let&amp;#8217;sEncryptは全てのWebのトラフィックをHTTPSに置き換えることを目標にして立ち上がりましたが、当初はスポンサーも少なくルート認証局を持てずにいました。
しかし、スノーデン・ショックによって実際に国家規模のネットの監視が明るみになって以降、もともと設立時から携わっていたMozillaやEFFに加え、AkamaiやCiscoなどもスポンサーに加わりIdenTrustがLet&amp;#8217;sEncryptの発行する証明書のルート認証局になることでいっきにその知名度を上げ、実際に証明書を発行できるようになっています。
他にも、つい最近の話になりますが、2017年6月の＠ITセキュリティセミナーでサイバーセキュリティ研究開発センターの安藤類央氏が以下のように述べています。
 例えばFacebookは、どの『いいね！』ボタンを押したかというデータを基に、ユーザーの人種、性格、性的指向、政治的イデオロギー、配偶者や恋人の有無、薬物常用の有無を言い当てられるという。「メタデータは、その人の生活全てを確実に映し出す。十分な量のメタデータがあれば、コンテンツはいらない」というNSA元法律責任者の声や「私たちは、あなたが今どこにいるのかを知っている。これまで、どこにいたかを知っている。今、何を考えているのかも大体知っている」というGoogleのエリック・シュミット氏の声からもデータの持つ威力がうかがい知れるだろう。
    </description>
    </item>
    
    <item>
      <title>ちょっと岩手までさんさ踊りを踊りに行ってきた</title>
      <link>https://www.uranari.io/trip/301/</link>
      <pubDate>Thu, 03 Aug 2017 15:41:14 +0000</pubDate>
      
      <guid>https://www.uranari.io/trip/301/</guid>
      <description>今年の頭に今年は目標として富山、東北、島根に行くことを決意して2月に富山へ行ったので次の目標地として東北の岩手県に行ってきました。
何故岩手なのかってのは岩手に知り合いがいるんでついでに会いに行けるからです。
月曜朝一の新幹線で盛岡駅へ。

岩手には3日くらい滞在していましたが、初日は平泉に行きました。
源義経最期の地で有名ですね。
たぶん松尾芭蕉が「夏草や兵どもが夢の跡」と詠った景色。
一面の緑。

松尾芭蕉の銅像

中尊寺金色堂が内部は写真禁止だったので撮影できませんでした。
外観は撮るの忘れてた。
鶯宿温泉というところに宿を取っていたので盛岡まで戻って宿に移動。
宿泊したのは雫石駅から乗り合いのバスに乗って行くことのできる鶯宿温泉の栄弥という宿です。

川の側に宿があってなんと8月なのに涼しい！！
クーラーをかけないでも寝れるどころか朝方は少し寒いくらいでした。
この宿の恐ろしいところはなんと宿なのにプログラミング言語に入門書があるところ！

無線LANもありましたし開発合宿にもってこいなのでは。
集落の夕暮れ、ノスタルジックな気分になる。

あと集落の中には足湯がありました。
足湯いいよ足湯。
それも源泉をまんま引いてるのか少し熱くてとなりの水道から加水して自分で温度調節しないといけないみたい？


山の中で星も綺麗だし足湯に浸かりながら星空観察とかしてました。
あと途中で狸見かけたんですけど生狸は初めて見ましたね。
2日目は知り合いと龍泉洞というところに行きました。
先日の大雨の影響で途中の道が崩れてたり川の中に大きいコンクリートの塊が転がってたりと結構傷跡が残ってました。
龍泉洞の中の写真。
結構暗かったのでこういうときは明るいレンズと手ブレ補正のついてるカメラが欲しい。
龍泉洞の中は寒いので夏場でも羽織るものを持っていくことをおすすめします。
綺麗に撮れた写真がこれくらいしかない。


その日の夜はちょうど盛岡でさんさ踊りをやっていたのでそれを見学してきました。
普通に眺めるだけだと思ってたら最後に沿道の観客も飛び入りで混ざって踊っていいとのことだったので自分も混ざって踊ってました。
やっぱ眺めてるだけより参加したほうが面白いよね。



交通情報です。


3日目は盛岡駅でお土産を購入して新幹線で帰りました。
自分の今年の夏が終わったので来年はどこに行こうか思いを馳せながら次の夏を待ちたいと思います。</description>
    </item>
    
    <item>
      <title>S2-048(CVE-2017-9791)を検証してみる</title>
      <link>https://www.uranari.io/tech/security/261/</link>
      <pubDate>Fri, 07 Jul 2017 21:29:59 +0000</pubDate>
      
      <guid>https://www.uranari.io/tech/security/261/</guid>
      <description>Struts2の脆弱性がアナウンスされていたので検証してみました。またRCEみたいです。
https://cwiki.apache.org/confluence/display/WW/S2-048
既にというかcwikiの該当のページが公開される前からチラホラと噂が流れてて公開とほぼ同じかそれより先のタイミングで攻撃コードも出回りはじめていたのでなんだかなーという気持ち。
ちなみにStruts 2.3.32で検証しました。
偉い人が怖いので一部関係無い箇所も黒く塗りつぶしていますがidコマンドの実行結果が帰ってきていることが分かるかと思います。
上記のリンク先にも記載されていますが、今回の脆弱性はS2-045のときのようにStruts2を使用していれば存在しないページにも効くわけではなく、Struts 1 pluginを利用している場合のみ脆弱性が存在しているようです。
簡単にまとめると脆弱性が存在するのはStruts 2.3.xを使っていて且つStruts 1 pluginを利用している場合のみということになりそうです。
なお現段階(7月8日 AM 6:00)では修正バージョンは正式にはリリースされていませんが、Struts2.3.33がGitHubには公開されていますしコミットログを見ると2週間ほど前に修正されてるようなのでアップデートしても問題ないか検証はできるかもしれません。
https://github.com/apache/struts/tree/STRUTS_2_3_33
アプリケーションの実装の問題なのでおそらくパッチは出ないか出たとしても修正されるのは付属しているサンプルアプリケーションになると思います。
&amp;lt;追記&amp;gt;
自分はTocat7の上でStruts2.3.32を動かして検証しましたが、検証した際にTomcatのログを確認したところ以下のようなエラーが吐き出されていました。
アプリケーションの実装や使用するミドルウェア、実行されるOGNL式によってエラーの内容は変わると思いますが、同じような環境で自分が試したのと同じ攻撃コードが実行された場合は同じようなエラーログが吐かれると思うので注意が必要です。
/usr/local/tomcat7/logs/localhost.2017-07-08.log</description>
    </item>
    
    <item>
      <title>2017年6月のssmjpに参加してきたよ</title>
      <link>https://www.uranari.io/ssmjp/231/</link>
      <pubDate>Tue, 04 Jul 2017 06:28:58 +0000</pubDate>
      
      <guid>https://www.uranari.io/ssmjp/231/</guid>
      <description>2017年6月のssmjpに参加してきました。
タイトルと発表者はそれぞれ以下の通り
目次  1 信頼できる情報源の探し方 @YuhoKameda   2 ビジネスに貢献するための運用設計　波田野さん   3 AWS LambdaとDynamoDBがこんなにツライはずがない @nekoruri   4 感想   5 Togetterまとめ    信頼できる情報源の探し方 @YuhoKameda   Kamedaさんは最近blogを書いていて、その中で情報をどこまで追っかけると信頼できるか検証しており、1日で1500～2000記事くらいをFeedlyで見ているとのこと。
Kamedaさんとしては、信頼できるソースとは
・一次ソースへのリンク等、その記事が基にした情報源を書いてある
・お役所などかたいところにインタビューしたような記事
・ベンダから出ている公式な情報
・セキュリティインシデントなどのときは被害者が直接出している情報
信頼できないソースとは
・書いている人の個人的な見解が入っている
Kamedaさんのやり方としては、MSの毎月出ているWindowsUpdateの場合だと
・MSの公式サイトに載っている英語ページ
・MSの公式に載っている日本語のページ
・MSの公式をもとに書かれたメディアの記事
の上から順に信頼できるソースとして普段は見ているそうです。
また全員が必ず一次ソースを見る必要はなく、現場のエンジニアはできるだけ一次ソースを参照したほうがいいけど、役員などのクラスの人はメディアのニュース記事で十分ではないかとのこと。
ビジネスに貢献するための運用設計　波田野さん   波田野さんの運用の話。
運用ってやっている方も何をやっているかうまく説明できない。
運用の定義からしましょうということで運用とは「サービスデリバリ」と定義していました。
運用をサービスデリバリと定義することでサービスとデリバリという2つの専門性で捉えられるとのこと。
サービスとは顧客の問題を解決することであり、デリバリとはサービスを顧客に安定的に提供すること。
つまり運用とはサービスデリバリのことであり、サービスデリバリとは顧客の問題を解決し安定的に提供することであり、運用とは実質フルスタックのことである。
とはいえ1人でフルスタックは辛いのでチームでフルスタックができるようになるといい。
エンジニアは現場視点で物事を考えるので現場にとって最適な解をとりがちだが、本当はビジネスや会社にとって最適な解を取る必要がある。
　→現場が楽になることと会社の利益になることがぶつかりがちになることが多いため
現実的な手段として、作業する際のマニュアルや運用に作業を依頼する際の手順をしっかりと整備して記録に残るようにすることで運用がどれだけ顧客の問題を解決できたか客観的に評価できるようになるといい。
波田野さんは品川のJAISTサテライトキャンパスでビジネスモデルキャンパスを学んでおり、それを基に考えているそうです。
AWS LambdaとDynamoDBがこんなにツライはずがない @nekoruri [slideshare id=77408438&amp;amp;doc=20170630ssmjppainfularchitecture-170630184007]
@nekoruriさんのAWS LambdaとDynamoDBでサーバーレスなシステムを作ったお話。</description>
    </item>
    
    <item>
      <title>pcapファイルから特定のHTTPRequestとそのResponseを抜き出す</title>
      <link>https://www.uranari.io/tech/219/</link>
      <pubDate>Mon, 05 Jun 2017 12:43:36 +0000</pubDate>
      
      <guid>https://www.uranari.io/tech/219/</guid>
      <description>ネットワーク系のエンジニアなら誰しも数GBあるpcapファイルから特定のHTTPRequstとそのResponseだけを抜き出したくなることが何回かあるのではないでしょうか。
&amp;nbsp;
やり方を書いてみます。
まずpcapファイルがありますね。

このpcapファイルの中からこのブログ(www.uranari.io)にアクセスしているHTTPのRequestとそのResponseだけを抜き出して別のpcapに保存します。
&amp;nbsp;
まず以下のようにtsharkを使用することで特定のHTTPRequestのstream番号が分かります。
$ tshark -r pcap.pcapng -R http.host==&#34;www.uranari.io&#34; -T fields -e tcp.stream -R の後ろのDisplayFilterの条件を変えることでそれぞれのFilterで引っかかったHTTPのstream番号が分かるはずです。
後は出力されたstream番号でpcapファイルをfilterすればfilterしたHTTPRequestとそのResponseだけを抜き出すことができます。
以下のようにすれば最初からfilterとして出力できる。
$ tshark -r pcap.pcapng -R http.host==&#34;www.uranari.io&#34; -T fields -e tcp.stream | sort -un | sed -e &#39;:loop; N; $!b loop; s/\n/ or tcp.stream==/g&#39; 7 or tcp.stream==8 or tcp.stream==9 or tcp.stream==10 or tcp.stream==11 or tcp.stream==12 or tcp.stream==48 or tcp.stream==49 or tcp.stream==52 or tcp.stream==53 or tcp.stream==54 or tcp.stream==61 or tcp.stream==67 or tcp.</description>
    </item>
    
    <item>
      <title>GWは神戸に行ってたり</title>
      <link>https://www.uranari.io/trip/211/</link>
      <pubDate>Sat, 13 May 2017 16:54:47 +0000</pubDate>
      
      <guid>https://www.uranari.io/trip/211/</guid>
      <description>皆さんGWはいかがお過ごしたったでしょうか
&amp;nbsp;
自分は神戸に行ってました

なんで神戸に行ってたかというと078神戸というイベントがあってそれに参加するために行ってました
078神戸の078は神戸市の市外局番から取ってるらしいです
この078神戸というイベントは色んなブースが出てたり企画がされたりなんですが、自分もその中の１企画で運営として参加してました

どんな事をしてたかはまた別で書けたら書きます
あとComingKobeっていう音楽フェスにも行きました
人が多すぎてすぐ帰りましたけど&amp;#8230;

&amp;nbsp;
ここから神戸市内を散策した話
まず新幹線で新神戸駅に着いたらロープウェーが見えたんで登ってみるかと行ったらハーブ園でした
ロープウェーからの景色は良かったしハーブ園では色んなハーブの香りがしたしで思いつきで行ったけど満足度は高かった


園内スタンプラリーか何かだろうかこんなのもあった

&amp;nbsp;
摩耶山にも登ってきました
摩耶山は日本三大夜景にも数えられてるほど夜景が綺麗らしいですが、夜は時間がなかったのでお昼に行きました
摩耶山に登る途中はケーブルカーとロープウェーで特にケーブルカーで山を登ってく途中が森の中って感じでいい
下の写真みたいな森のなかに続いてく感じの道とか大好き

帰りの写真だけど途中はトンネルもあった
トンネルくぐって～♪って感じ

&amp;nbsp;
天気が良くて摩耶山の上からだと神戸市内を一望でき遠くの紀州まで見渡すことができました
こういうときはフルサイズの一眼が欲しくなる

&amp;nbsp;
実は最終日は現地の人の家に泊めてもらいましたが一緒に行った人がおもむろに市場で鯛を買って調理した結果がこちらです
また食べたい

次はエヴァの新幹線に乗りたい</description>
    </item>
    
    <item>
      <title>Hyper-Vでレガシーネットワークアダプターを使うときの設定</title>
      <link>https://www.uranari.io/tech/201/</link>
      <pubDate>Mon, 01 May 2017 07:38:59 +0000</pubDate>
      
      <guid>https://www.uranari.io/tech/201/</guid>
      <description>自分用メモ
&amp;nbsp;
仮想マシン作るたびにこの設定しないといけないので
Hyper-V上で仮想マシンをたてるときにレガシーネットワークアダプターを使わざるをえないことがあるのでそのときのネットワーク回りの設定の注意点
まずハードウェアの追加でレガシーネットワークアダプターを追加

MACアドレスは固定に

仮想マシン側(今回はCentOS)のinterfaceに割り振ったMACアドレスを記載する
それ以外は通常通り設定
/etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=eth0 HWADDR=XX:XX:XX:XX:XX:XX TYPE=Ethernet UUID=hogehoge ONBOOT=yes NM_CONTROLLED=yes BOOTPROTO=dhcp これでもうまくネットワークに繋がらないときは/etc/udev/rules.d/70-persistent-net.rulesでMACアドレスとinterfaceの紐付けが正しいかや同じ名前のinterfaceが複数設定されてないか確認
/etc/udev/rules.d/70-persistent-net.rules This file was automatically generated by the /lib/udev/write_net_rules # program, run by the persistent-net-generator.rules rules file. # # You can modify it, as long as you keep each rule on a single # line, and change only the value of the NAME= key. # PCI device 0x1011:0x0009 (tulip) SUBSYSTEM==&#34;net&#34;, ACTION==&#34;add&#34;, DRIVERS==&#34;</description>
    </item>
    
    <item>
      <title>秩父をぶらり旅</title>
      <link>https://www.uranari.io/trip/195/</link>
      <pubDate>Wed, 26 Apr 2017 05:33:31 +0000</pubDate>
      
      <guid>https://www.uranari.io/trip/195/</guid>
      <description>なんとなく秩父行きたいなーと思って行ってきました。
とりあえず朝の9時に西武秩父駅に着いたけど全くノープラン・・・

駅の改札出たところでスマホで秩父の観光名所を検索しながらとりあえず三峰神社に行ってみようということでバスに乗って三峰神社へ
バス結構長いなーと思ったら1時間以上乗ってたらしい
西武秩父駅までも1時間以上電車に乗ってたので三峰神社に着いた時点でだいぶ体力を消耗してた
去年茨木の鹿島神宮に友人とバスや電車で行ったときも思ったけどやっぱレンタカーがいいね、お金がかかるけど移動は電車やバスより楽
途中寄り道もできるし
移動でだいぶクタクタになりながらも三峰神社到着

&amp;nbsp;
三峰神社は全体的に装飾が鮮やかなのが有名みたいですね
随身門も他の神社と比べて鮮やかな感じです

&amp;nbsp;
三峯神社には遥拝殿がありますが、東京近郊で最も天に近いと言われてるだけあってそこからの景色は素晴らしかった
遥拝殿手前だとこんな感じ

遥拝殿からの景色がこんな感じですが朝方とかに来たら雲海が見れそうだなーと
次は時間帯も計画して来よう

&amp;nbsp;
またバスで西武秩父駅まで戻ったらお昼を食べてちょうど芝桜の時期らしいので芝桜を見に行こうと羊山公園へ
西武秩父駅から羊山公園は歩いて行けました
途中の松坂がめっちょ急で登りきるころにはゼーハーしてましたけど
羊山公園という名前がついてるだけあって羊がいました

少し奥に行くと芝桜

&amp;nbsp;
アップで撮ってみる

&amp;nbsp;
体力的に限界だったので芝桜を見終わったらすぐ帰りました
バスや電車って座ってるだけなのに体力使いますよね
あと自分で運転してるものは大丈夫だけど他人が運転してるものは酔っちゃう
次は国営ひたち海浜公園のネモフィラを見に行きたいけど早くてもGW明けになりそう</description>
    </item>
    
    <item>
      <title>サイバーセキュリティはだれのもの？</title>
      <link>https://www.uranari.io/poem/181/</link>
      <pubDate>Thu, 09 Mar 2017 17:16:08 +0000</pubDate>
      
      <guid>https://www.uranari.io/poem/181/</guid>
      <description>最近思っていることを書いておこうかなと。
将来自分の考え方が変わったときでもこの記事を振り返って「あの頃はこう思ってたなー」と振り返れるように。
これから書くことは筆者の個人的な観測範囲での話です。
いやそんなことないでしょとかひょっとすると言ってる本人は自覚なかったりするかもしれませんが。
さて、最近はセキュリティというものが盛り上がってるらしいですね。
個人的に盛り上がってるのはセキュリティ業界の人たちと何かインシデントが発生すると全国ニュースになってしまう大手の企業と一部のITリテラシーの高い人たちだけだというのが個人的な実感です。
以前こういう記事を読んだんですけど僕個人の実感としてはこっちのほうが近いというかむしろこれが現実でしょといった感じ。
 リテラシー{.keyword}の高い人たちの中だけで日々過ごしていると、とても居心地が良いし、日々心配するようなことって少ないと思う。でも、圧倒的大多数の人はそうじゃないんよな。自分たちはやっぱ少数派なんだなあって思う。
リテラシー{.keyword}の高い人たちにお願いしたい。
地域の情報モラル{.keyword}の講演に足を運ぼう。
消費生活センター{.keyword}の講演、セキュリティ{.keyword}の講演も。世の中の興味や関心はそこにないんだって、実感してきて。
 ところで皆さんはパスワード管理ソフトを使っていますか？2016年12月に情報処理推進機構（IPA）から「2016年度情報セキュリティに対する意識調査」という報告書が公開されています。
これによれば「パソコンにインストールして使うアカウント管理ソフトウェアを使っている」人の割合は7%だそうです。
まぁなんでこんことを急に言いだしたかというとアカウントが乗っ取られたときに脆弱なパスワード使ってましたっていうとパスワード管理ソフト使いましょうとかそもそも脆弱なパスワードを使ってるやつが悪いって言う人を見ることがあるからなんですね。
脆弱なパスワード使ってるほうが悪いとか言ってる人は論外なんでいいですけど、皆さんパスワード管理ソフト使ってます？僕一応使ってますけどアレめんどくさくないですか？
毎回違うパスワード生成しないといけないのも面倒くさいしログインするたびにID/パスワードコピペするのも面倒くさいし自動ログインの設定も面倒くさいし、そもそもパスワード管理ソフトのパスワードどうすんのよとか。
後はワンタイムパスワードとかセキュリティと利便性のトレードオフの最たるものだと思ってますし。
別に使わないほうがいいとは言ってないですよ。使わないよりは使ったほうがいいです。ただめんどくさいだけです。
このブログを書いてる日付がちょうどサイバーセキュリティ月間というものなんですが、今年はソードアート・オンラインという作品とコラボしててそこで謳ってるのが「サイバーセキュリティは全員参加」という言葉なんですね。
でも上に書いたように現実はセキュリティとか気にしてるのってリテラシーの高い一部の人達だけで、じゃそれ以外のセキュリティをまったく気にしない人たちをどうするのってなるわけです。
僕はそもそもパスワード使いまわしちゃ駄目で推測しやすい文字列のパスワードは避けましょうとか、2段階認証を提供してるけどユーザーがそのオプション使ってませんでしたとか、やったほうが安全ですけどやってなかったときにユーザーに責任を負わせかねないようなことに反対なんですね。リテラシーのある人だけしか守りませんよって言ってるようなものだと思ってるので。
サイバーセキュリティはだれのもの？みんなのものです。
だからこそ全員参加ではなく、参加してるリテラシーの高い人だけじゃなくて、特に普段セキュリティを意識していない人たちがセキュリティを意識しなくても安全にネットを使うことができる仕組みを考える必要があると思ってます。
いつまでもパスワードの定期変更は有効かとか何文字以上で何種類の記号が使われていれば安全とか2要素認証も結局突破することは可能だとかくだらないことで何年間も同じことを議論してないで、いい加減そんなことを気にしなくてもどうやったら安全にネットを使うことができるかという方向に議論が進んでほしいと思ってます。</description>
    </item>
    
    <item>
      <title>富山五箇山の合掌造り集落が美しかったよ</title>
      <link>https://www.uranari.io/trip/146/</link>
      <pubDate>Wed, 01 Mar 2017 15:19:05 +0000</pubDate>
      
      <guid>https://www.uranari.io/trip/146/</guid>
      <description>どうも、uranariです
富山県の五箇山にある世界遺産にも指定されている相倉集落と菅沼集落に行ってきました。
合掌造りの世界遺産というと白川郷が有名ですが、白川郷と五箇山を含めた合掌造りの集落が世界遺産に指定されています。
まずは最初に行った相倉集落から

レンズフードが綺麗にハマってなかったらしく右上にフードの影が見えますが気にしないでください。
集落は思ったより小さくて、合掌造りがポツポツある感じでした。
ここって普通に人が住んでいるのかな？
IT系の会社で働いているとプライバシーとか個人情報とかに敏感になってしまうので人が住んでいるところをパシャパシャ撮ってネットにアップするのに躊躇いがあります。

雪を溶かすため？なのか配管から水が流れてました。

後は除雪してたり。

相倉集落を見たあとは菅沼集落にも行ってきました。
車で15分くらいと近い場所にあります。

煙硝の館なるものがありました。
加賀藩は火薬の一大生産地だったらしく、こういった山間の集落では米の代わりに火薬を生産して税として納めてたようです。

ここは集落と雪のコントラストも綺麗でしたが、集落の隣を流れてる庄川もとても綺麗でした。
風が大人しくて日が落ちる前とか夜明け前に写真を撮るといい写真が撮れそうだなーと思いつつ宿は富山の氷見市というところにとっていたのでさっさと引き返しました。

また行きたいなー。</description>
    </item>
    
    <item>
      <title>2017年2月のssmjpに参加してきたよ</title>
      <link>https://www.uranari.io/ssmjp/71/</link>
      <pubDate>Tue, 21 Feb 2017 11:19:30 +0000</pubDate>
      
      <guid>https://www.uranari.io/ssmjp/71/</guid>
      <description>2017年2月のssmjpに参加してきました。
4人の発表者がいてタイトルはそれぞれ以下の通り
目次  1 米国のペネトレーションテスト事情 Tomohisa Ishikawa   2 RSA暗号運用でやってはいけないNのこと @y_hag   3 君のHashは @abend   4 サイバー考古学 @delphinz   5 感想    米国のペネトレーションテスト事情 Tomohisa Ishikawa 最近のアメリカでのペネトレーションテスト事情についてのLTでした。
日本だとペネトレーションテスト＝脆弱性診断ですがアメリカだとRedTeamが主流になっているとのこと。
RedTeamというとセキュリティ業界以外の人にはわかりづらいと思うので日本語に直すと「侵入テスト」といったところでしょうか。
日本のペネトレーションテストはWebアプリケーションやミドルウェアなどの外部に公開されているサービスに脆弱性があるかをブラックボックスでテストするのが一般的ですが、アメリカのRedTeamでは実際に情報を持ち出すことが可能かをテストしています。
日本のペネトレーションテストは脆弱性の有無を調査することが目的ですが、アメリカのペネトレーションテストは情報を窃取することが可能かを実際にやってみて調査することが目的だと感じました。
RedTeamはdigital、social、physicalの3つの分野にまたがってテストが実施されているそうです。
digitalはネットワーク経由で侵入できるかや、socialはOSINT等でその企業や従業員の情報を収集し、電話やメールを使い従業員や役員、関係者になりすましてオペレーター等から企業の機密情報を聞き出せるかや、physicalは鍵穴をピッキングして建物や施設内に侵入したり偽の従業員証を作成して従業員になりすまして施設内に侵入し、情報を持ち出すことができるかをテストしているそうです。
RedTeamは最終的に情報を持ち出すことができるかをテストしており、その過程で警備員に取り押さえられたり警察に通報されて警察沙汰になったりする可能性も想定されているそうです。
さらに、digitalは従来通りハッキングに長けた人が実施したり、socialは心理学者を雇ったりphysicalは鍵屋を雇ったりと映画みたいにそれぞれの専門分野の人が集まってチームを組んで実施したりと本格的です。
アメリカで主流になっているということは日本でも2〜3年後には主流になると思います&amp;#8230;と言いたいところですがRedTeamは実際に通常業務を行なっている環境で期間も半年など長期間かけて従業員や管理者も目の前で起こっていることが実際のインシデントなのかRedTeamによる侵入テストなのか判断できない状態で実施するので業務に影響が出ることを極端に嫌がる日本では受け入れられない気がします。
RSA暗号運用でやってはいけないNのこと @y_hag [slideshare id=72368516&amp;amp;doc=sonickunrsa-170220153940]
次はRSA暗号の運用についてのLTでした。
この話は筆者が暗号は素因数分解が困難（素因数分解に時間がかかりすぎて現実的な時間では解けない）ことが前提になっているという程度にしか理解していないので詳しく解説できません。。。
前提としてRSA暗号のアルゴリズムと768bitまでの鍵長の鍵は既に解かれていて、1024bitもそろそろ危険だとして非推奨になっていることを説明されてから、公開鍵暗号方式を使用して秘密鍵と公開鍵を生成する際や、平文を暗号化する際に気をつけておくべきポイントについてお話されてました。
以下にRSA暗号を運用する際に気をつけるべきポイントとして挙げられていた点をいくつか紹介します。
・合成数 n を生成する p と q の値が小さすぎてはいけない
・p と q の値が近すぎてはいけない
・p と q の値にメルセンヌ素数やフェルマー素数を使ってはいけない
・公開鍵を複数作成するときに同じ素数を使いまわしてはいけない
・任意の暗号文を複合した偶奇1bitを知られてはいけない
・上位ビットが共通する２つの平文の暗号文を知られてはいけない</description>
    </item>
    
    <item>
      <title>鎌倉をお散歩</title>
      <link>https://www.uranari.io/gallery/67/</link>
      <pubDate>Sat, 11 Feb 2017 03:57:16 +0000</pubDate>
      
      <guid>https://www.uranari.io/gallery/67/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>AWS LightsailでWordPressを立ち上げるときに/bitnami/index.htmlを表示させない</title>
      <link>https://www.uranari.io/tech/aws/42/</link>
      <pubDate>Thu, 02 Feb 2017 12:20:02 +0000</pubDate>
      
      <guid>https://www.uranari.io/tech/aws/42/</guid>
      <description>このblogはAWS Lightsailで運用していますが、立ち上げるときに気をつけたことを書いておきます。
AWS LightsailのWordPressでデフォルト状態のままだと http://ip[domain]/bitnami/でアクセスするとWordPressのユーザーアカウントが記載されたページが表示されます。
パスワードは記載されていませんが精神衛生上よろしくないので/bitnami/にアクセスがあるとトップページにリダイレクトさせたいと思います。
AWS LightsailsのWordPressのイメージのapacheの設定ファイルは /opt/bitnami/apache2/conf/httpd.confです。
&amp;lt;IfModule alias_module ~ # 下の1行を追加する RedirectMatch \/bitnami\/(.*) / ~ &amp;lt;/IfModule  あと個人でblogを運用していて自宅以外からは管理画面にアクセスしないという人は/opt/bitnami/apps/wordpress/conf/htaccess.confに以下の設定もしておくといいと思います。
# 一番下に以下の内容をディレクティブごと追加 &amp;lt;Directory &#34;/opt/bitnami/apps/wordpress/htdocs/wp-admin/&#34; Order deny,allow Deny from all Allow from &#34;自分のIPアドレス&#34; &amp;lt;/Directory &amp;lt;Directory &#34;/opt/bitnami/apps/wordpress/htdocs/&#34; &amp;lt;Files wp-login.php Order deny,allow Deny from all Allow from &#34;自分のIPアドレス&#34; &amp;lt;/Files &amp;lt;/Directory  bitnamiというXAMPPみたいな？LAMP環境を使っているみたいですが設定ファイルの場所を探すのに苦労しました。</description>
    </item>
    
    <item>
      <title>ハニーポット観察記録を読んだ</title>
      <link>https://www.uranari.io/tech/33/</link>
      <pubDate>Thu, 02 Feb 2017 08:24:01 +0000</pubDate>
      
      <guid>https://www.uranari.io/tech/33/</guid>
      <description>morihi-socの森久さんがハニーポット本を出したので読んだ感想を書きます。
   内容はハニーポットのログから攻撃手法や攻撃の傾向を調べてみようといったものです。ログからどういった脆弱性を狙った攻撃なのかだけでなく攻撃者の意図まで推測しようというところはさすがです。
この攻撃はbotで自動的に打たれてるのか、ただの愉快犯てきな攻撃なのか、脆弱性があるか調査してるだけなのか、本気でデータベースの情報を取りにきてるのかといったところまで想像を膨らませながら分析すると楽しいですね。
細かい内容はぜひ購入して読んでいただきたいのですが、Webサーバーの膨大なログの中から、この本で紹介されているような怪しいログをピンポイントで見つけられるようになるとまた新しい楽しさがあります。
ネットワークセキュリティアナリストってどんなことやってるの？とか外部のSOCに監視を依頼してるけど実際彼らがどんなことをしているかわからないので知りたいという人はこの本と合わせてオライリーのデータ分析によるネットワークセキュリティを読むと大体こんな感じでログを分析しているということがわかるのではないかなと思います。
   &amp;nbsp;</description>
    </item>
    
    <item>
      <title>初投稿。</title>
      <link>https://www.uranari.io/poem/17/</link>
      <pubDate>Sun, 22 Jan 2017 04:23:10 +0000</pubDate>
      
      <guid>https://www.uranari.io/poem/17/</guid>
      <description>初投稿です。 テストを兼ねています。 とりあえずなんとなくブログをはじめてみようと思ったのでやってみる。</description>
    </item>
    
  </channel>
</rss>